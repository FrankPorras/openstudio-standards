{
  "constants": [
    {
      "name": "skylight_to_roof_ratio_max_value",
      "data_type": "value",
      "refs": [
        "NECB2011_S_3.2.1.4(2)"
      ],
      "value": 0.05,
      "units": "ratio",
      "notes": ""
    },
    {
      "name": "sizing_factor_max_cooling",
      "data_type": "value",
      "refs": [
        "NECB2011_S_8.4.4.9(1)"
      ],
      "value": 1.1,
      "units": "ratio",
      "notes": ""
    },
    {
      "name": "sizing_factor_max_heating",
      "data_type": "value",
      "refs": [
        "NECB2011_S_8.4.4.9(2)"
      ],
      "value": 1.3,
      "units": "ratio",
      "notes": ""
    },
    {
      "name": "fan_constant_volume_pressure_rise_value",
      "data_type": "value",
      "refs": [
        "NECB2011_S_5.Assumption"
      ],
      "value": 640.0,
      "units": "Pa",
      "notes": ""
    },
    {
      "name": "fan_variable_volume_pressure_rise_value",
      "data_type": "value",
      "refs": [
        "NECB2011_S_5.Assumption"
      ],
      "value": 1458.33,
      "units": "Pa",
      "notes": "Sets the fan pressure rise based on the Prototype buildings inputs which are governed by the flow rate coming through the fan and whether the fan lives inside a unit heater, PTAC, etc. 1000 Pa for supply fan and 458.33 Pa for return fan (accounts for efficiency differences between two fans)"
    },
    {
      "name": "infiltration_rate_m3_per_s_per_m2",
      "data_type": "value",
      "refs": [
        "NECB2011_S_5.Assumption"
      ],
      "value": 0.00025,
      "units": "m3/s/m2",
      "notes": ""
    },
    {
      "name": "infiltration_constant_term_coefficient",
      "data_type": "value",
      "refs": [
        "NECB2011_S_5.Assumption"
      ],
      "value": 0.0,
      "units": "",
      "notes": ""
    },
    {
      "name": "infiltration_temperature_term_coefficient",
      "data_type": "value",
      "refs": [
        "NECB2011_S_5.Assumption"
      ],
      "value": 0.0,
      "units": "",
      "notes": ""
    },
    {
      "name": "infiltration_velocity_term_coefficient",
      "data_type": "value",
      "refs": [
        "Assumption"
      ],
      "value": 0.224,
      "units": "",
      "notes": ""
    },
    {
      "name": "infiltration_velocity_squared_term_coefficient",
      "data_type": "value",
      "refs": [
        "Assumption"
      ],
      "value": 0.0,
      "units": "",
      "notes": ""
    },
    {
      "name": "skylight_to_roof_ratio",
      "data_type": "value",
      "refs": [
        "NECB2011_S_3.2.1.4(2)"
      ],
      "value": 0.05,
      "units": "",
      "notes": ""
    },
    {
      "name": "get_necb_hdd18_max_distance_tolerance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 500000,
      "units": "km",
      "notes": "for get_necb_hdd18 method in necb_2011.rb"
    },
    {
      "name": "earth_radius",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 6371,
      "units": "km",
      "notes": "for distance method in necb_2011.rb"
    },
    {
      "name": "unmet_hours_tolerance_for_heating_setpoint",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 1,
      "units": "C",
      "notes": "for build_prototype_model method in necb_2011.rb"
    },
    {
      "name": "unmet_hours_tolerance_for_cooling_setpoint",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 1,
      "units": "C",
      "notes": "for build_prototype_model method in necb_2011.rb"
    },
    {
      "name": "occsens_lpd_storage_max_area_limit",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 100,
      "units": "m2",
      "notes": "for set_occ_sensor_spacetypes method in necb_2011.rb"
    },
    {
      "name": "occsens_lpd_storage_refrigerated_max_area_limit",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 100,
      "units": "m2",
      "notes": "for set_occ_sensor_spacetypes method in necb_2011.rb"
    },
    {
      "name": "occsens_lpd_hospital_med_sup_max_area_limit",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 100,
      "units": "m2",
      "notes": "for set_occ_sensor_spacetypes method in necb_2011.rb"
    },
    {
      "name": "occsens_lpd_office_enc_max_area_limit",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 25,
      "units": "m2",
      "notes": "for set_occ_sensor_spacetypes method in necb_2011.rb"
    },
    {
      "name": "radiant_fraction",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.3,
      "units": "fraction",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },


    {
      "name": "default_clothing_schedule_day",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_clothing_schedule_hour",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 24,
      "units": "hr",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_clothing_schedule_minute",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "min",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_clothing_schedule_seconds",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "s",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_clothing_schedule_fraction",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 1.0,
      "units": "fraction",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },


    {
      "name": "summer_clothing_schedule_day",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_hour",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 24,
      "units": "hr",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_minute",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "min",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_seconds",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "s",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_fraction",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.5,
      "units": "fraction",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_start_date_month",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 5,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_start_date_day",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 1,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_end_date_month",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 9,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_end_date_day",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 30,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },


    {
      "name": "default_air_velocity_schedule_day",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_air_velocity_schedule_hour",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 24,
      "units": "hr",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_air_velocity_schedule_minute",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "min",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_air_velocity_schedule_seconds",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "s",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_air_velocity_schedule_fraction",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.2,
      "units": "fraction",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },


    {
      "name": "default_work_efficiency_schedule_day",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_work_efficiency_schedule_hour",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 24,
      "units": "hr",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_work_efficiency_schedule_minute",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "min",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_work_efficiency_schedule_seconds",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "s",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_work_efficiency_schedule_fraction",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "fraction",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },


    {
      "name": "wwr_limit",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 40.0,
      "units": "ratio",
      "notes": "window to wall ratio limit for apply_standard_window_to_wall_ratio method in building_envelope.rb"
    },


    {
      "name": "default_almost_adiabatic_thermal_resistance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 500,
      "units": "K.m/W",
      "notes": "for model_find_and_add_construction method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "default_almost_adiabatic_roughness",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "Smooth",
      "units": "string",
      "notes": "for model_find_and_add_construction method in building_envelope.rb"
    },



    {
      "name": "CP02_carpet_pad_roughness",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "VeryRough",
      "units": "string",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb"
    },
    {
      "name": "CP02_carpet_pad_thermal_resistance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.21648,
      "units": "K.m/W",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "CP02_carpet_pad_thermal_absorptance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.9,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "CP02_carpet_pad_solar_absorptance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.7,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "CP02_carpet_pad_visible_absorptance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.8,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },


    {
      "name": "100mm_normalweight_concrete_floor_roughness",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "MediumSmooth",
      "units": "string",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb"
    },
    {
      "name": "100mm_normalweight_concrete_floor_thickness",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.1016,
      "units": "m",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "100mm_normalweight_concrete_floor_conductivity",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 2.31,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "100mm_normalweight_concrete_floor_density",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 2322,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "100mm_normalweight_concrete_floor_specific_heat",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 832,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    }
  ]
}