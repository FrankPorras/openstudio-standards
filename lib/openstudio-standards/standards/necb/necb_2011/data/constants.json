{
  "constants": [
    {
      "name": "skylight_to_roof_ratio_max_value",
      "data_type": "value",
      "refs": [
        "NECB2011_S_3.2.1.4(2)"
      ],
      "value": 0.05,
      "units": "ratio",
      "notes": ""
    },
    {
      "name": "sizing_factor_max_cooling",
      "data_type": "value",
      "refs": [
        "NECB2011_S_8.4.4.9(1)"
      ],
      "value": 1.1,
      "units": "ratio",
      "notes": ""
    },
    {
      "name": "sizing_factor_max_heating",
      "data_type": "value",
      "refs": [
        "NECB2011_S_8.4.4.9(2)"
      ],
      "value": 1.3,
      "units": "ratio",
      "notes": ""
    },
    {
      "name": "fan_constant_volume_pressure_rise_value",
      "data_type": "value",
      "refs": [
        "NECB2011_S_5.Assumption"
      ],
      "value": 640.0,
      "units": "Pa",
      "notes": ""
    },
    {
      "name": "fan_variable_volume_pressure_rise_value",
      "data_type": "value",
      "refs": [
        "NECB2011_S_5.Assumption"
      ],
      "value": 1458.33,
      "units": "Pa",
      "notes": "Sets the fan pressure rise based on the Prototype buildings inputs which are governed by the flow rate coming through the fan and whether the fan lives inside a unit heater, PTAC, etc. 1000 Pa for supply fan and 458.33 Pa for return fan (accounts for efficiency differences between two fans)"
    },
    {
      "name": "infiltration_rate_m3_per_s_per_m2",
      "data_type": "value",
      "refs": [
        "NECB2011_S_5.Assumption"
      ],
      "value": 0.00025,
      "units": "m3/s/m2",
      "notes": ""
    },
    {
      "name": "infiltration_constant_term_coefficient",
      "data_type": "value",
      "refs": [
        "NECB2011_S_5.Assumption"
      ],
      "value": 0.0,
      "units": "",
      "notes": ""
    },
    {
      "name": "infiltration_temperature_term_coefficient",
      "data_type": "value",
      "refs": [
        "NECB2011_S_5.Assumption"
      ],
      "value": 0.0,
      "units": "",
      "notes": ""
    },
    {
      "name": "infiltration_velocity_term_coefficient",
      "data_type": "value",
      "refs": [
        "Assumption"
      ],
      "value": 0.224,
      "units": "",
      "notes": ""
    },
    {
      "name": "infiltration_velocity_squared_term_coefficient",
      "data_type": "value",
      "refs": [
        "Assumption"
      ],
      "value": 0.0,
      "units": "",
      "notes": ""
    },
    {
      "name": "skylight_to_roof_ratio",
      "data_type": "value",
      "refs": [
        "NECB2011_S_3.2.1.4(2)"
      ],
      "value": 0.05,
      "units": "",
      "notes": ""
    },
    {
      "name": "get_necb_hdd18_max_distance_tolerance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 500000,
      "units": "km",
      "notes": "for get_necb_hdd18 method in necb_2011.rb"
    },
    {
      "name": "earth_radius",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 6371,
      "units": "km",
      "notes": "for distance method in necb_2011.rb"
    },
    {
      "name": "unmet_hours_tolerance_for_heating_setpoint",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 1,
      "units": "C",
      "notes": "for build_prototype_model method in necb_2011.rb"
    },
    {
      "name": "unmet_hours_tolerance_for_cooling_setpoint",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 1,
      "units": "C",
      "notes": "for build_prototype_model method in necb_2011.rb"
    },
    {
      "name": "occsens_lpd_storage_max_area_limit",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 100,
      "units": "m2",
      "notes": "for set_occ_sensor_spacetypes method in necb_2011.rb"
    },
    {
      "name": "occsens_lpd_storage_refrigerated_max_area_limit",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 100,
      "units": "m2",
      "notes": "for set_occ_sensor_spacetypes method in necb_2011.rb"
    },
    {
      "name": "occsens_lpd_hospital_med_sup_max_area_limit",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 100,
      "units": "m2",
      "notes": "for set_occ_sensor_spacetypes method in necb_2011.rb"
    },
    {
      "name": "occsens_lpd_office_enc_max_area_limit",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 25,
      "units": "m2",
      "notes": "for set_occ_sensor_spacetypes method in necb_2011.rb"
    },
    {
      "name": "radiant_fraction",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.3,
      "units": "fraction",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },


    {
      "name": "default_clothing_schedule_day",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_clothing_schedule_hour",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 24,
      "units": "hr",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_clothing_schedule_minute",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "min",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_clothing_schedule_seconds",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "s",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_clothing_schedule_fraction",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 1.0,
      "units": "fraction",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },


    {
      "name": "summer_clothing_schedule_day",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_hour",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 24,
      "units": "hr",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_minute",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "min",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_seconds",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "s",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_fraction",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.5,
      "units": "fraction",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_start_date_month",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 5,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_start_date_day",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 1,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_end_date_month",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 9,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "summer_clothing_schedule_end_date_day",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 30,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },


    {
      "name": "default_air_velocity_schedule_day",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_air_velocity_schedule_hour",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 24,
      "units": "hr",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_air_velocity_schedule_minute",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "min",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_air_velocity_schedule_seconds",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "s",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_air_velocity_schedule_fraction",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.2,
      "units": "fraction",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },


    {
      "name": "default_work_efficiency_schedule_day",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "integer",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_work_efficiency_schedule_hour",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 24,
      "units": "hr",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_work_efficiency_schedule_minute",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "min",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_work_efficiency_schedule_seconds",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "s",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },
    {
      "name": "default_work_efficiency_schedule_fraction",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "fraction",
      "notes": "for space_type_apply_internal_loads method in beps_compliance_path.rb"
    },


    {
      "name": "wwr_limit",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 40.0,
      "units": "ratio",
      "notes": "window to wall ratio limit for apply_standard_window_to_wall_ratio method in building_envelope.rb"
    },


    {
      "name": "default_almost_adiabatic_thermal_resistance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 500,
      "units": "K.m/W",
      "notes": "for model_find_and_add_construction method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "default_almost_adiabatic_roughness",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "Smooth",
      "units": "string",
      "notes": "for model_find_and_add_construction method in building_envelope.rb"
    },



    {
      "name": "CP02_carpet_pad_roughness",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "VeryRough",
      "units": "string",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb"
    },
    {
      "name": "CP02_carpet_pad_thermal_resistance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.21648,
      "units": "K.m/W",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "CP02_carpet_pad_thermal_absorptance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.9,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "CP02_carpet_pad_solar_absorptance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.7,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "CP02_carpet_pad_visible_absorptance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.8,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },


    {
      "name": "100mm_normalweight_concrete_floor_roughness",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "MediumSmooth",
      "units": "string",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb"
    },
    {
      "name": "100mm_normalweight_concrete_floor_thickness",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.1016,
      "units": "m",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "100mm_normalweight_concrete_floor_conductivity",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 2.31,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "100mm_normalweight_concrete_floor_density",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 2322,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "100mm_normalweight_concrete_floor_specific_heat",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 832,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },



    {
      "name": "nonres_floor_insulation_roughness",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "MediumSmooth",
      "units": "string",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb"
    },
    {
      "name": "nonres_floor_insulation_thermal_resistance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 2.88291975297193,
      "units": "K.m/W",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "nonres_floor_insulation_thermal_absorptance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.9,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "nonres_floor_insulation_solar_absorptance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.7,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "nonres_floor_insulation_visible_absorptance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.7,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },


    {
      "name": "G01_13mm_gypsum_board_roughness",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "Smooth",
      "units": "string",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb"
    },
    {
      "name": "G01_13mm_gypsum_board_thickness",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.0127,
      "units": "m",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "G01_13mm_gypsum_board_conductivity",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.1600,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "G01_13mm_gypsum_board_density",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 800,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "G01_13mm_gypsum_board_specific_heat",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 1090,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "G01_13mm_gypsum_board_thermal_absorptance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.9,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "G01_13mm_gypsum_board_solar_absorptance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.7,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "G01_13mm_gypsum_board_visible_absorptance",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.5,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },


    {
      "name": "M10_200mm_concrete_block_basement_wall_roughness",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "MediumRough",
      "units": "string",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb"
    },
    {
      "name": "M10_200mm_concrete_block_basement_wall_thickness",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.2032,
      "units": "m",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "M10_200mm_concrete_block_basement_wall_conductivity",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 1.326,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "M10_200mm_concrete_block_basement_wall_density",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 1842,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },
    {
      "name": "M10_200mm_concrete_block_basement_wall_specific_heat",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 912,
      "units": "",
      "notes": "for assign_contruction_to_adiabatic_surfaces method in building_envelope.rb. Not sure about units."
    },


    {
      "name": "is_radiant_conductance_value_multiplier_for_outsideBoundary_not_outdoors",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.80,
      "units": "fraction",
      "notes": "for set_necb_external_surface_conductance method in building_envelope.rb."
    },
    {
      "name": "is_radiant_conductance_value_multiplier_for_outsideBoundary_ground",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.80,
      "units": "fraction",
      "notes": "for set_necb_external_surface_conductance method in building_envelope.rb."
    },



    {
      "name": "minimum_capacity_btu_per_hr_for_cooling_cap_>_20_kW",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 68243,
      "units": "btu/hr",
      "notes": "for air_loop_hvac_economizer_required? method in hvac_systems.rb."
    },



    {
      "name": "default_heat_design_t",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 21.0,
      "units": "C",
      "notes": "for air_loop_hvac_energy_recovery_ventilator_required? method in hvac_systems.rb."
    },
    {
      "name": "min_exhaust_heat_content_for_erv_reqd",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 150.0,
      "units": "",
      "notes": "for air_loop_hvac_energy_recovery_ventilator_required? method in hvac_systems.rb. Not sure about units."
    },


    {
      "name": "erv_sensible_effectiveness_at_100_heating_air_flow",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.5,
      "units": "",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb. Not sure about units."
    },
    {
      "name": "erv_latent_effectiveness_at_100_heating_air_flow",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.5,
      "units": "",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb. Not sure about units."
    },
    {
      "name": "erv_sensible_effectiveness_at_75_heating_air_flow",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.5,
      "units": "",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb. Not sure about units."
    },
    {
      "name": "erv_latent_effectiveness_at_75_heating_air_flow",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.5,
      "units": "",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb. Not sure about units."
    },
    {
      "name": "erv_sensible_effectiveness_at_100_cooling_air_flow",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.5,
      "units": "",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb. Not sure about units."
    },
    {
      "name": "erv_latent_effectiveness_at_100_cooling_air_flow",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.5,
      "units": "",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb. Not sure about units."
    },
    {
      "name": "erv_sensible_effectiveness_at_75_cooling_air_flow",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.5,
      "units": "",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb. Not sure about units."
    },
    {
      "name": "erv_latent_effectiveness_at_75_cooling_air_flow",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.5,
      "units": "",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb. Not sure about units."
    },
    {
      "name": "erv_supply_air_outlet_temperature_control",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": true,
      "units": "boolean",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb."
    },
    {
      "name": "erv_heat_exchanger_type",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "Rotary",
      "units": "string",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb."
    },
    {
      "name": "erv_frost_control_type",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "ExhaustOnly",
      "units": "string",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb."
    },
    {
      "name": "erv_economizer_lockout",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": true,
      "units": "boolean",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb."
    },
    {
      "name": "erv_threshold_temperature",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": -23.3,
      "units": "C",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb."
    },
    {
      "name": "erv_initial_defrost_time_fraction",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.167,
      "units": "fraction",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb."
    },
    {
      "name": "erv_rate_of_defrost_time_fraction_increase",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 1.44,
      "units": "fraction",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb."
    },
    {
      "name": "setpoint_manager_outdoor_air_pretreat_minimum_setpoint_temperature",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": -99.0,
      "units": "C",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb."
    },
    {
      "name": "setpoint_manager_outdoor_air_pretreat_maximum_setpoint_temperature",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 99.0,
      "units": "C",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb."
    },
    {
      "name": "setpoint_manager_outdoor_air_pretreat_minimum_setpoint_humidity_ratio",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.00001,
      "units": "ratio",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb."
    },
    {
      "name": "setpoint_manager_outdoor_air_pretreat_maximum_setpoint_humidity_ratio",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 1.0,
      "units": "ratio",
      "notes": "for air_loop_hvac_apply_energy_recovery_ventilator method in hvac_systems.rb."
    },



    {
      "name": "air_terminal_single_duct_VAV_reheat_maximum_flow_fraction_during_reheat",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.5,
      "units": "ratio",
      "notes": "for air_loop_hvac_apply_vav_damper_action method in hvac_systems.rb. Specifically for AirTerminalSingleDuctVAVReheat when `damper_action != 'Dual Maximum'`"
    },



    {
      "name": "air_loop_hvac_motorized_oa_damper_limit_minimum_oa_flow_cfm",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "cfm",
      "notes": "for air_loop_hvac_motorized_oa_damper_limits method in hvac_systems.rb."
    },
    {
      "name": "air_loop_hvac_motorized_oa_damper_limit_maximum_stories",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "integer",
      "notes": "for air_loop_hvac_motorized_oa_damper_limits method in hvac_systems.rb."
    },



    {
      "name": "capacity_boiler_limit_upper",
      "data_type": "value",
      "refs": [
        "NECB 2011 8.4.4.10.6.(c)",
        "NECB 2011 8.4.4.10.6.(d)"
      ],
      "value": 352.0,
      "units": "kw",
      "notes": "for boiler_hot_water_apply_efficiency_and_curves method in hvac_systems.rb."
    },
    {
      "name": "boiler_minimum_part_load_ratio",
      "data_type": "value",
      "refs": [
        "NECB 2011 8.4.4.10.6.(d)"
      ],
      "value": 0.25,
      "units": "ratio",
      "notes": "for boiler_hot_water_apply_efficiency_and_curves method in hvac_systems.rb. This applies when boiler capacity is greater than the `capacity_boiler_limit_upper` constant above"
    },
    {
      "name": "capacity_boiler_limit_lower",
      "data_type": "value",
      "refs": [
        "NECB 2011 8.4.4.10.6.(b)",
        "NECB 2011 8.4.4.10.6.(c)"
      ],
      "value": 176.6,
      "units": "kw",
      "notes": "for boiler_hot_water_apply_efficiency_and_curves method in hvac_systems.rb."
    },
    {
      "name": "secondary_boiler_capacity_during_high_load",
      "data_type": "value",
      "refs": [
        "NECB 2011 8.4.4.10.6.(d)"
      ],
      "value": 0.001,
      "units": "w",
      "notes": "for boiler_hot_water_apply_efficiency_and_curves method in hvac_systems.rb. The capacity applies when the capacity >= `capacity_boiler_limit_upper`"
    },
    {
      "name": "secondary_boiler_capacity_during_low_load",
      "data_type": "value",
      "refs": [
        "NECB 2011 8.4.4.10.6.(b)"
      ],
      "value": 0.001,
      "units": "w",
      "notes": "for boiler_hot_water_apply_efficiency_and_curves method in hvac_systems.rb. The capacity applies when the capacity is <= `capacity_boiler_limit_lower`"
    },



    {
      "name": "chiller_electric_eir_chiller_flow_mode",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "LeavingSetpointModulated",
      "units": "string",
      "notes": "for chiller_electric_eir_apply_efficiency_and_curves method in hvac_systems.rb."
    },
    {
      "name": "chiller_electric_eir_minimum_part_load_ratio",
      "data_type": "value",
      "refs": [
        "NECB 2011 8.4.4.11.(6).(h)"
      ],
      "value": 0.25,
      "units": "fraction",
      "notes": "for chiller_electric_eir_apply_efficiency_and_curves method in hvac_systems.rb."
    },
    {
      "name": "chiller_electric_eir_minimum_unloading_ratio",
      "data_type": "value",
      "refs": [
        "NECB 2011 8.4.4.11.(6).(h)"
      ],
      "value": 0.25,
      "units": "fraction",
      "notes": "for chiller_electric_eir_apply_efficiency_and_curves method in hvac_systems.rb."
    },
    {
      "name": "chiller_electric_eir_step_limit_capacity",
      "data_type": "value",
      "refs": [
        "NECB 2011 8.4.4.11.(6)"
      ],
      "value": 2100.0,
      "units": "kw",
      "notes": "for chiller_electric_eir_apply_efficiency_and_curves method in hvac_systems.rb."
    },
    {
      "name": "secondary_chiller_electric_eir_capacity_min",
      "data_type": "value",
      "refs": [
        "NECB 2011 8.4.4.11.(6).(b)"
      ],
      "value": 0.001,
      "units": "w",
      "notes": "for chiller_electric_eir_apply_efficiency_and_curves method in hvac_systems.rb. Applies when capacity <= `chiller_electric_eir_step_limit_capacity`"
    },
    {
      "name": "primary_chiller_electric_eir_capacity_step_value",
      "data_type": "value",
      "refs": [
        "NECB 2011 8.4.4.12.(2)",
        "NECB 2011 8.4.4.12.(3)"
      ],
      "value": 1750,
      "units": "kw",
      "notes": "for chiller_electric_eir_apply_efficiency_and_curves method in hvac_systems.rb."
    },
    {
      "name": "primary_chiller_electric_fan_power_at_design_air_flow_rate_multiplier",
      "data_type": "value",
      "refs": [
        "NECB 2011 8.4.4.12.(6).(b)"
      ],
      "value": 0.015,
      "units": "",
      "notes": "for chiller_electric_eir_apply_efficiency_and_curves method in hvac_systems.rb. this multiplies the tower_cap to determine cooling tower fan power"
    },



    {
      "name": "coil_cooling_dx_multi_stage_capacity_limit",
      "data_type": "value",
      "refs": [
        "NECB 2011 8.4.4.11.8.(b)",
        "NECB 2011 8.4.4.11.8.(c)",
        "NECB 2011 8.4.4.11.8.(d)"
      ],
      "value": 66.0,
      "units": "kw",
      "notes": "for coil_cooling_dx_multi_speed_apply_efficiency_and_curves method in hvac_systems.rb."
    },
    {
      "name": "PTAC_capacity_btu_per_hr_minimum_limit",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 7000,
      "units": "BTU/hr",
      "notes": "for coil_cooling_dx_multi_speed_apply_efficiency_and_curves method in hvac_systems.rb."
    },
    {
      "name": "PTAC_capacity_btu_per_hr_maximum_limit",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 15000,
      "units": "BTU/hr",
      "notes": "for coil_cooling_dx_multi_speed_apply_efficiency_and_curves method in hvac_systems.rb."
    },



    {
      "name": "coil_heating_gas_multi_stage_capacity_limit",
      "data_type": "value",
      "refs": [
        "NECB 2011 8.4.4.10.7.(b)",
        "NECB 2011 8.4.4.10.7.(c)"
      ],
      "value": 66.0,
      "units": "kw",
      "notes": "for coil_heating_gas_multi_stage_apply_efficiency_and_curves method in hvac_systems.rb."
    },


    {
      "name": "fan_baseline_impeller_efficiency",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.65,
      "units": "",
      "notes": "for fan_baseline_impeller_efficiency method in hvac_systems.rb."
    },


    {
      "name": "fan_standard_minimum_motor_efficiency",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.85,
      "units": "",
      "notes": "for fan_standard_minimum_motor_efficiency_and_size method in hvac_systems.rb."
    },
    {
      "name": "nominal_hp_for_small_fan",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.5,
      "units": "HP",
      "notes": "for fan_standard_minimum_motor_efficiency_and_size method in hvac_systems.rb."
    },

    {
      "name": "econ_max_100_pct_oa_schedule_day",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "integer",
      "notes": "for apply_economizers method in hvac_systems.rb"
    },
    {
      "name": "econ_max_100_pct_oa_schedule_hour",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 24,
      "units": "hr",
      "notes": "for apply_economizers method in hvac_systems.rb"
    },
    {
      "name": "econ_max_100_pct_oa_schedule_minute",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "min",
      "notes": "for apply_economizers method in hvac_systems.rb"
    },
    {
      "name": "econ_max_100_pct_oa_schedule_seconds",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0,
      "units": "s",
      "notes": "for apply_economizers method in hvac_systems.rb"
    },
    {
      "name": "econ_max_100_pct_oa_schedule_fraction",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 1.0,
      "units": "fraction",
      "notes": "for apply_economizers method in hvac_systems.rb"
    },


    {
      "name": "sys1_make_up_air_unit_type_of_load_to_size_on",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "VentilationRequirement",
      "units": "string",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_minimum_system_air_flow_ratio",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 1.0,
      "units": "ratio",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_preheat_design_temperature",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 7.0,
      "units": "C",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_preheat_design_humidity_ratio",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.008,
      "units": "ratio",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_precool_design_temperature",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 13.0,
      "units": "C",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_precool_design_humidity_ratio",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.008,
      "units": "ratio",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_central_cooling_design_supply_air_temperature",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 13,
      "units": "C",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_central_heating_design_supply_air_temperature",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 43,
      "units": "C",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_sizing_option",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "NonCoincident",
      "units": "string",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_all_outdoor_air_in_cooling",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": true,
      "units": "boolean",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_all_outdoor_air_in_heating",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": true,
      "units": "boolean",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_central_cooling_design_supply_air_humidity_ratio",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.0085,
      "units": "ratio",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_central_heating_design_supply_air_humidity_ratio",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.0080,
      "units": "ratio",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_cooling_design_air_flow_method",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "DesignDay",
      "units": "string",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_cooling_design_air_flow_rate",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.0,
      "units": "rate",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_heating_design_air_flow_method",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "DesignDay",
      "units": "string",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_heating_design_air_flow_rate",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": 0.0,
      "units": "rate",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    },
    {
      "name": "sys1_make_up_air_unit_system_outdoor_air_method",
      "data_type": "value",
      "refs": [
        ""
      ],
      "value": "ZoneSum",
      "units": "string",
      "notes": "for add_sys1_unitary_ac_baseboard_heating method in hvac_systems.rb"
    }
  ]
}